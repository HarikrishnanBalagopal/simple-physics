(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[1],{

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _haribala_simple_physics__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @haribala/simple-physics */ \"./node_modules/@haribala/simple-physics/simple_physics.js\");\n/* harmony import */ var _haribala_simple_physics_simple_physics_bg_wasm__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @haribala/simple-physics/simple_physics_bg.wasm */ \"./node_modules/@haribala/simple-physics/simple_physics_bg.wasm\");\n\n\n\nconst W = 640;\nconst H = W;\nconst NUM_SUB_STEPS = 4;\nconst NUM_PARTICLES = 100;\nconst GRAVITY = 0.001;\n\nfunction main() {\n    // model\n    const physicsUniverse = _haribala_simple_physics__WEBPACK_IMPORTED_MODULE_0__[\"PhysicsUniverse\"].new(NUM_PARTICLES);\n    physicsUniverse.set_gravity(GRAVITY);\n    console.log('physicsUniverse', physicsUniverse);\n    console.log('physicsUniverse.get_num', physicsUniverse.get_num());\n    physicsUniverse.tick(0.1);\n    const PARTICLE_MEM_SIZE = physicsUniverse.get_particles_mem_size();\n    const PARTICLE_MEM_SIZE_IN_FLOATS = Math.floor(PARTICLE_MEM_SIZE / 4);\n    console.log('physicsUniverse.get_particles_mem_size', PARTICLE_MEM_SIZE, 'PARTICLE_MEM_SIZE_IN_FLOATS', PARTICLE_MEM_SIZE_IN_FLOATS);\n    const CURR_NUM_PARTICLES = physicsUniverse.get_num_particles();\n    console.log('physicsUniverse.get_num_particles', CURR_NUM_PARTICLES);\n    const particlesPtr = physicsUniverse.get_particles_offset();\n    console.log('particlesPtr', particlesPtr);\n    let particlesMemArray = new Float32Array(_haribala_simple_physics_simple_physics_bg_wasm__WEBPACK_IMPORTED_MODULE_1__[\"memory\"].buffer, particlesPtr, CURR_NUM_PARTICLES * PARTICLE_MEM_SIZE_IN_FLOATS);\n    console.log('particlesMemArray', particlesMemArray);\n\n    // output\n    const output_fps = document.querySelector('#output-fps');\n    const output_num_particles = document.querySelector('#output-num-particles');\n    const output_wasm_physics_canvas = document.querySelector('#output-wasm-physics-canvas');\n    output_wasm_physics_canvas.width = W;\n    output_wasm_physics_canvas.height = H;\n    const physicsCtx = output_wasm_physics_canvas.getContext('2d');\n\n    // input\n    const button_pause = document.querySelector('#button-pause');\n    const button_add_particle = document.querySelector('#button-add-particle');\n    const button_clear_particle = document.querySelector('#button-clear-particle');\n    const button_fountain = document.querySelector('#button-fountain');\n    button_add_particle.addEventListener('click', () => physicsUniverse.add_particle());\n    button_clear_particle.addEventListener('click', () => physicsUniverse.delete_all_particles());\n\n    // rendering\n    const drawBackground = () => {\n        physicsCtx.save();\n        physicsCtx.fillStyle = 'black';\n        physicsCtx.fillRect(0, 0, W, H);\n        physicsCtx.fillStyle = '#222222';\n        physicsCtx.beginPath();\n        physicsCtx.arc(W / 2, H / 2, W / 2, 0, 2 * Math.PI);\n        physicsCtx.fill();\n        physicsCtx.restore();\n    }\n\n    let LAST_CURR_NUM_PARTICLES = CURR_NUM_PARTICLES;\n    let LAST_POINTER = particlesPtr;\n    const drawParticles = () => {\n        physicsCtx.save();\n        const CURR_NUM_PARTICLES = physicsUniverse.get_num_particles();\n        // console.log('physicsUniverse.get_num_particles', CURR_NUM_PARTICLES);\n        const particlesPtr = physicsUniverse.get_particles_offset();\n        // console.log('physicsUniverse.get_particles_offset', particlesPtr);\n        if (LAST_CURR_NUM_PARTICLES !== CURR_NUM_PARTICLES || LAST_POINTER !== particlesPtr) {\n            // console.log('LAST_CURR_NUM_PARTICLES !== CURR_NUM_PARTICLES', LAST_CURR_NUM_PARTICLES, 'particlesPtr', particlesPtr);\n            LAST_CURR_NUM_PARTICLES = CURR_NUM_PARTICLES;\n            LAST_POINTER = particlesPtr;\n            particlesMemArray = new Float32Array(_haribala_simple_physics_simple_physics_bg_wasm__WEBPACK_IMPORTED_MODULE_1__[\"memory\"].buffer, particlesPtr, CURR_NUM_PARTICLES * PARTICLE_MEM_SIZE_IN_FLOATS);\n            // console.log('particlesMemArray', particlesMemArray);\n        }\n\n        for (let i = 0; i < CURR_NUM_PARTICLES * PARTICLE_MEM_SIZE_IN_FLOATS; i += PARTICLE_MEM_SIZE_IN_FLOATS) {\n            const x = particlesMemArray[i + 0];\n            const y = particlesMemArray[i + 1];\n            const radius = particlesMemArray[i + 4];\n            const color = particlesMemArray[i + 5];\n            // console.log(x, y, radius, color);\n            physicsCtx.fillStyle = `hsl(${color}, 100%, 50%)`;\n            physicsCtx.beginPath();\n            physicsCtx.arc(x, y, radius < 0 ? 1. : radius, 0, 2 * Math.PI);\n            physicsCtx.fill();\n        }\n\n        physicsCtx.restore();\n    };\n\n    // update\n    let playing = true;\n    let fountain_activated = false;\n    let avg_fps = 0;\n    let last_t = 0;\n    let last_fountain_t = 0;\n    const step = (t) => {\n        if (!playing) return;\n        requestAnimationFrame(step);\n        if (!last_t) last_t = t;\n        if (!last_fountain_t) last_fountain_t = t;\n        const dt = t - last_t;\n        if (dt < 1) return;\n        {\n            const fps = 1000 / dt;\n            avg_fps = 0.9 * avg_fps + 0.1 * fps;\n            output_fps.textContent = Math.floor(avg_fps * 100) / 100;\n        }\n        {\n            output_num_particles.textContent = physicsUniverse.get_num_particles();\n        }\n        last_t = t;\n        if (fountain_activated && t - last_fountain_t > 100) {\n            last_fountain_t = t;\n            const scale = 10.;\n            const scaled_t = last_t * 0.01;\n            const old_x = W / 2 + scale * Math.cos(0.1 * scaled_t);\n            const old_y = H / 2 + scale * Math.sin(0.1 * scaled_t);\n            physicsUniverse.add_particle_at_pos(W / 2, H / 2, old_x, old_y, 5. + 5 * Math.random(), scaled_t);\n        }\n\n        for (let i = 0; i < NUM_SUB_STEPS; i++) {\n            physicsUniverse.tick(dt / NUM_SUB_STEPS);\n        }\n        drawBackground();\n        drawParticles();\n    };\n\n    // fountain\n    button_fountain.addEventListener('click', () => {\n        fountain_activated = !fountain_activated;\n    });\n\n    button_pause.addEventListener('click', () => {\n        playing = !playing;\n        if (playing) {\n            requestAnimationFrame(step);\n            button_pause.textContent = 'Pause';\n        }\n        else {\n            last_t = 0;\n            last_fountain_t = 0;\n            button_pause.textContent = 'Play';\n        }\n    });\n\n    requestAnimationFrame(step);\n}\n\nmain();\n\n\n//# sourceURL=webpack:///./index.js?");

/***/ }),

/***/ "./node_modules/@haribala/simple-physics sync recursive":
/*!****************************************************!*\
  !*** ./node_modules/@haribala/simple-physics sync ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = \"./node_modules/@haribala/simple-physics sync recursive\";\n\n//# sourceURL=webpack:///./node_modules/@haribala/simple-physics_sync?");

/***/ })

}]);